# Generated by Django 2.2.10 on 2020-04-11 10:44
import os
import csv

from django.db import migrations
from django.conf import settings

from api.tasks import update_landcode_with_custom_factory_model


SEED_DATA_PATH = os.path.join(settings.BASE_DIR, "fixtures/full-info.csv")


def forward_func(apps, schema_editor):
    Factory = apps.get_model("api", "Factory")

    updated_factories = []
    with open(SEED_DATA_PATH, "r") as csvfile:
        reader = csv.DictReader(csvfile)
        factories = Factory.objects.filter(before_release=True).all()
        idx2factory = {}
        for factory in factories:
            try:
                idx = int(factory.name.split('.')[1])
                idx2factory[idx] = factory
            except Exception:
                # for system online, some before_release data have new name,
                # thus it's not possible to retrieve its original index
                # simply ignore them
                pass

        for idx, datum in enumerate(reader):
            if idx not in idx2factory:
                continue
            factory = idx2factory[idx]
            factory.townname = datum['行政區']
            factory.sectname = datum['段名']
            factory.sectcode = datum['段號']
            factory.save()
            updated_factories.append(factory)

    after_release_count = Factory.objects.filter(before_release=False).count()
    print(f'{after_release_count} factories will be updated')
    for idx, factory in enumerate(Factory.objects.filter(before_release=False).all()):
        print(f'{idx}/{after_release_count}: get landcode of {factory.id} {factory.name}')
        update_landcode_with_custom_factory_model(factory.id, Factory)


def backward_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0014_auto_20200411_1043'),
    ]

    operations = [
        migrations.RunPython(
            code=forward_func,
            reverse_code=backward_func,
        ),
    ]
