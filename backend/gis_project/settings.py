"""
Django settings for gis_project project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import pathlib

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ.get(
    "DISFACTORY_BACKEND_SECRET_KEY", "!6m1_y3-d#07typf2v^te0z+1pz!i0+y!2n-c5)1by3ux2=*(q"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DISFACTORY_BACKEND_DEBUG", "true").lower() == "true"

# get allowed_host from env, if in DEBUG mode, add local hosts in

allowed_hosts = []

hosts_in_env = os.environ.get("DISFACTORY_ALLOWED_HOST", None)
print(hosts_in_env)

if hosts_in_env is not None:
    try:
        for host in hosts_in_env.split(","):
            allowed_hosts.append(host.split(";")[0])
    except Exception:
        print(
            "error occurs when parsing allowed_hosts, please check the environment variable `DISFACTORY_ALLOWED_HOST`"
        )
else:
    print(
        "can't read allowed_hosts, please check the environment variable `DISFACTORY_ALLOWED_HOST`"
    )

ALLOWED_HOSTS = allowed_hosts

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party
    "rest_framework",
    "corsheaders",
    "django_q",
    "rangefilter",
    "drf_yasg",
    "import_export",
    # Local
    "users.apps.UsersConfig",
    "api.apps.ApiConfig",
]

if DEBUG:
    DJANGO_LOGGER_HANDLER = ["file", "console"]
else:
    DJANGO_LOGGER_HANDLER = [
        "file",
        "console",
    ]  # no need to log to console and file since we cannot access both on middle2
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "basic": {"format": "%(asctime)s [%(levelname)s] %(message)s (%(module)s %(lineno)d)"}
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.environ.get("DISFACTORY_BACKEND_LOG_FILE", "./debug.log"),
            "formatter": "basic",
        },
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": DJANGO_LOGGER_HANDLER,
            "level": os.environ.get("DISFACTORY_BACKEND_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
    },
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gis_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gis_project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DISFACTORY_BACKEND_DEFAULT_DB_NAME", "postgres"),
        "USER": os.environ.get("DISFACTORY_BACKEND_DEFAULT_DB_USER", "postgres"),
        "PASSWORD": os.environ.get("DISFACTORY_BACKEND_DEFAULT_DB_PASSWORD", "postgres"),
        "HOST": os.environ.get("DISFACTORY_BACKEND_DEFAULT_DB_HOST", "db"),
        "PORT": os.environ.get("DISFACTORY_BACKEND_DEFAULT_DB_PORT", 5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = "/static/"

# Static root for collected static files (required for collectstatic)
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR, "static"))

STATICFILES_DIRS = []

AUTH_USER_MODEL = "users.CustomUser"

# Image upload backend settings
IMGUR_CLIENT_ID = os.environ.get("DISFACTORY_IMGUR_CLIENT_ID")
IMAGEBB_API_KEY = os.environ.get("DISFACTORY_IMAGEBB_API_KEY")

# Cloudflare R2 settings
CLOUDFLARE_R2_ACCOUNT_ID = os.environ.get("DISFACTORY_CLOUDFLARE_R2_ACCOUNT_ID")
CLOUDFLARE_R2_ACCESS_KEY_ID = os.environ.get("DISFACTORY_CLOUDFLARE_R2_ACCESS_KEY_ID")
CLOUDFLARE_R2_SECRET_ACCESS_KEY = os.environ.get("DISFACTORY_CLOUDFLARE_R2_SECRET_ACCESS_KEY")
CLOUDFLARE_R2_BUCKET_NAME = os.environ.get("DISFACTORY_CLOUDFLARE_R2_BUCKET_NAME")
CLOUDFLARE_R2_CUSTOM_DOMAIN = os.environ.get("DISFACTORY_CLOUDFLARE_R2_CUSTOM_DOMAIN")

# Image upload service configuration
IMAGE_UPLOAD_CONFIG = {
    # Backend preferences (order matters - first available backend is tried first)
    'BACKEND_ORDER': os.environ.get('DISFACTORY_IMAGE_BACKEND_ORDER', 'imgur,imagebb,cloudflare_r2').split(','),
    
    # Request timeout for external services (seconds)
    'REQUEST_TIMEOUT': int(os.environ.get('DISFACTORY_IMAGE_UPLOAD_TIMEOUT', '30')),
    
    # Maximum file size (bytes) - 10MB default
    'MAX_FILE_SIZE': int(os.environ.get('DISFACTORY_IMAGE_MAX_FILE_SIZE', str(10 * 1024 * 1024))),
    
    # Allowed image formats
    'ALLOWED_FORMATS': os.environ.get('DISFACTORY_IMAGE_ALLOWED_FORMATS', 'jpg,jpeg,png,gif,webp').split(','),
    
    # Whether to validate image dimensions
    'VALIDATE_DIMENSIONS': os.environ.get('DISFACTORY_IMAGE_VALIDATE_DIMENSIONS', 'false').lower() == 'true',
    
    # Maximum image dimensions (pixels)
    'MAX_WIDTH': int(os.environ.get('DISFACTORY_IMAGE_MAX_WIDTH', '4096')),
    'MAX_HEIGHT': int(os.environ.get('DISFACTORY_IMAGE_MAX_HEIGHT', '4096')),
    
    # Retry configuration
    'RETRY_ATTEMPTS': int(os.environ.get('DISFACTORY_IMAGE_RETRY_ATTEMPTS', '1')),
    'RETRY_DELAY': int(os.environ.get('DISFACTORY_IMAGE_RETRY_DELAY', '2')),
}

DEFAULT_CORS_ORIGIN_WHITELIST = [
    "https://dev.disfactory.tw",
    "https://disfactory.tw",
]
CORS_ORIGIN_WHITELIST = os.environ.get("DISFACTORY_BACKEND_CORS_ORIGIN_WHITELIST")
if CORS_ORIGIN_WHITELIST is None or CORS_ORIGIN_WHITELIST == "":
    CORS_ORIGIN_WHITELIST = DEFAULT_CORS_ORIGIN_WHITELIST
else:
    CORS_ORIGIN_WHITELIST = DEFAULT_CORS_ORIGIN_WHITELIST + CORS_ORIGIN_WHITELIST.split(",")
CORS_ALLOWED_ORIGIN_REGEXES = [r"^https://[\d\-\w]+\.netlify\.app$"]  # new UI url

TAIWAN_MAX_LATITUDE = 25.298401
TAIWAN_MIN_LATITUDE = 21.896900
TAIWAN_MAX_LONGITUDE = 122.007164
TAIWAN_MIN_LONGITUDE = 120.035141

MAX_FACTORY_PER_GET = int(os.environ.get("DISFACTORY_BACKEND_MAX_FACTORY_PER_GET", 50))
MAX_FACTORY_RADIUS_PER_GET = int(os.environ.get("DISFACTORY_BACKEND_MAX_FACTORY_RADIUS_PER_GET", 10))

Q_CLUSTER = {
    "name": "disfactory",
    "workers": 4,
    "recycle": 50,
    "timeout": 60,
    "compress": True,
    "cpu_affinity": 1,
    "label": "Django Q",
    "orm": "default",
    "bulk": 4,
}

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'image_upload': '10/hour',  # Rate limit for image uploads
        'image_upload_burst': '3/min',  # Burst protection
    }
}

# Map Widgets
MAP_WIDGETS = {
    "GooglePointFieldWidget": (
        ("zoom", 15),
        ("mapCenterLocationName", "taipei"),
        ("GooglePlaceAutocompleteOptions", {"componentRestrictions": {"country": "tw"}}),
        ("markerFitZoom", 12),
    ),
    "GOOGLE_MAP_API_KEY": os.environ.get("GOOGLE_MAP_API_KEY", ""),
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.environ.get("DISFACTORY_BACKEND_MEDIA_ROOT", "/tmp")
pathlib.Path(MEDIA_ROOT).mkdir(parents=True, exist_ok=True)
DOMAIN = os.environ.get("DISFACTORY_BACKEND_DOMAIN", "https://api.disfactory.tw/")
